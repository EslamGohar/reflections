What happens when you initialize a repository? Why do you need to do it?

> An empty repository is created, which contains no commit. It works that way so that it won't automatically include files you actually don't want to keep track of.


How is the staging area different from the working directory and the repository? What value do you think it offers?

> a prep table where Git will take the next commit. Files on the Staging Index are poised to be added to the repository. this allows you to group some files, out of all of the changed files in the working directory, so that the grouped files can be committed together.


How can you use the staging area to make sure you have one commit per logical change?

> First add files that are related to the first logical change you want to commit, and after making it sure you have staged all the files, make a commit. Next you stage other files that are related to the second logical change you want to commit, and so on.


What are some situations when branches would be helpful in keeping your history organized? How would branches help?

> If you want to experiment with a new feature, you can use a new branch. Or if you want to create a new version of a project, you can create a new branch. After the new functionality gets stable enough to go into the master branch, you could merge the experimental branch into the master.


How do the diagrams help you visualize the branch structure?

> They show me the sequence of commits; what's reachable; what's not.
using 'git log --graph --oneline [branch names]', you can easily tell how the whole branch structure was developed and at which point each branch was actually created. That would give you the overview of the whole structure of the project you are working on, so that you can tell what you are specifically focusing on and when and which branch to merge your work.


What is the result of merging two branches together? Why do we represent it in the diagram the way we do?

> All the commits in the second branch is merged into the first branch, and the resulting merge commit becomes the new head of your current branch.
The diagram shown by 'git log --graph' cleary shows the merged commit has two parents, which correspond to the prior heads of each merged branch.


What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?

> 
Pros:
-----
* Saves your time, especially when each non-conflicting merge is trivial.
* Makes you concentrate on the changes which actually contain conflicts.

Cons:
-----
Maybe can make it easier to overlook the potentially dangerous situation where two person are working on the same file at the same time.




