(1) When would you want to use a remote repository rather than keeping all your work local?
>> I want to use a remote repo  when I'm collaborating with other people on a project.
   I also use them when I want to share my code with someone, even if they just want to see my code and not contribute to it.
   I also sometimes use them when I want to be able to edit code from multiple different computers
   and keep the code up-to-date on all the computers. Also, remotes can be a good way to keep a backup of my work.
   
   
(2) Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?
>> Manually pulling changes allows me to determine when code is brought down. This means that code won't change
   unexpectedly without me knowing about it. For example, if I know the new
   version of some code is broken, I might not want to pull that change until I
   the bug is fixed.
   

(3) Describe the differences between forks, clones, and branches. When would you use one instead of another?
>>  Forking and cloning both copy an entire repository to a new location.
    The difference between forking and cloning is that forking
    is a special construct made by GitHub. You can only fork a GitHub
    repository to another location on GitHub, while you can clone any Git
    repository to anywhere you have access to. A clone creates a clone - a copy of a repo.
    A branch takes a working directory and adds a new line of commits 
    which runs in tandem with the master branch in the same repo.

    "I use branching for most cases where I want to add new changes to a
    repository while keeping an easy reference to a previous version, especially
    when collaborating with other people. I clone a repository on GitHub when I
    want to work on that repository locally rather than using the GitHub
    website. I fork a repository on GitHub when I want to make changes to that
    repository public, but I don't have permission to modify the original."


(4) What is the benefit of having a copy of the last known state of the remote stored locally?

>>  I can update my local copy before I leave. I can do this even
    if I'm not ready to merge those changes into my own branches yet.
    Then if I want, I can perform the merge while offline,
    or I need to know what the remote version is at some point, 
    I have an easy way to access it. allows you to do comparisons with what is on the remote.


(5) How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

>> Without git/github, I would use email and passing files back and forth.
   Make changes to a shared folder, for example, a DropBox folder.
   Real-time collaborative editors like Google Docs are also great for
   collaboration.
   
   
(6) When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

>> Working directly in Master when I'm working on my own device or with just one or two other people.
   When working with a large group, using Branches to keep track of which changes have already been reviewed and
   approved. Branches are good for experimentation. The master should be used for working production code. 
